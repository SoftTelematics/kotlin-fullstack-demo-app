/*
 * This file is generated by jOOQ.
 */
package my.mpp.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import my.mpp.jooq.Indexes;
import my.mpp.jooq.JPublic;
import my.mpp.jooq.Keys;
import my.mpp.jooq.tables.records.JProductsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JProducts extends TableImpl<JProductsRecord> {

    private static final long serialVersionUID = -334367825;

    /**
     * The reference instance of <code>public.products</code>
     */
    public static final JProducts PRODUCTS = new JProducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JProductsRecord> getRecordType() {
        return JProductsRecord.class;
    }

    /**
     * The column <code>public.products.id</code>.
     */
    public final TableField<JProductsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('products_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.products.name</code>.
     */
    public final TableField<JProductsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * Create a <code>public.products</code> table reference
     */
    public JProducts() {
        this(DSL.name("products"), null);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public JProducts(String alias) {
        this(DSL.name(alias), PRODUCTS);
    }

    /**
     * Create an aliased <code>public.products</code> table reference
     */
    public JProducts(Name alias) {
        this(alias, PRODUCTS);
    }

    private JProducts(Name alias, Table<JProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private JProducts(Name alias, Table<JProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JProducts(Table<O> child, ForeignKey<O, JProductsRecord> key) {
        super(child, key, PRODUCTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCTS_ID_UINDEX, Indexes.PRODUCTS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JProductsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JProductsRecord> getPrimaryKey() {
        return Keys.PRODUCTS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<JProductsRecord>>asList(Keys.PRODUCTS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProducts as(String alias) {
        return new JProducts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JProducts as(Name alias) {
        return new JProducts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JProducts rename(String name) {
        return new JProducts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JProducts rename(Name name) {
        return new JProducts(name, null);
    }
}
