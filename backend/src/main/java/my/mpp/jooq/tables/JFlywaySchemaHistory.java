/*
 * This file is generated by jOOQ.
 */
package my.mpp.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import my.mpp.jooq.Indexes;
import my.mpp.jooq.JPublic;
import my.mpp.jooq.Keys;
import my.mpp.jooq.tables.records.JFlywaySchemaHistoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFlywaySchemaHistory extends TableImpl<JFlywaySchemaHistoryRecord> {

    private static final long serialVersionUID = -1023999436;

    /**
     * The reference instance of <code>public.flyway_schema_history</code>
     */
    public static final JFlywaySchemaHistory FLYWAY_SCHEMA_HISTORY = new JFlywaySchemaHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFlywaySchemaHistoryRecord> getRecordType() {
        return JFlywaySchemaHistoryRecord.class;
    }

    /**
     * The column <code>public.flyway_schema_history.installed_rank</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, Integer> INSTALLED_RANK = createField("installed_rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.version</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.flyway_schema_history.description</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.type</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.script</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, String> SCRIPT = createField("script", org.jooq.impl.SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.checksum</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, Integer> CHECKSUM = createField("checksum", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.flyway_schema_history.installed_by</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, String> INSTALLED_BY = createField("installed_by", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.installed_on</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, Timestamp> INSTALLED_ON = createField("installed_on", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.flyway_schema_history.execution_time</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, Integer> EXECUTION_TIME = createField("execution_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.success</code>.
     */
    public final TableField<JFlywaySchemaHistoryRecord, Boolean> SUCCESS = createField("success", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.flyway_schema_history</code> table reference
     */
    public JFlywaySchemaHistory() {
        this(DSL.name("flyway_schema_history"), null);
    }

    /**
     * Create an aliased <code>public.flyway_schema_history</code> table reference
     */
    public JFlywaySchemaHistory(String alias) {
        this(DSL.name(alias), FLYWAY_SCHEMA_HISTORY);
    }

    /**
     * Create an aliased <code>public.flyway_schema_history</code> table reference
     */
    public JFlywaySchemaHistory(Name alias) {
        this(alias, FLYWAY_SCHEMA_HISTORY);
    }

    private JFlywaySchemaHistory(Name alias, Table<JFlywaySchemaHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JFlywaySchemaHistory(Name alias, Table<JFlywaySchemaHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> JFlywaySchemaHistory(Table<O> child, ForeignKey<O, JFlywaySchemaHistoryRecord> key) {
        super(child, key, FLYWAY_SCHEMA_HISTORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return JPublic.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FLYWAY_SCHEMA_HISTORY_PK, Indexes.FLYWAY_SCHEMA_HISTORY_S_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JFlywaySchemaHistoryRecord> getPrimaryKey() {
        return Keys.FLYWAY_SCHEMA_HISTORY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JFlywaySchemaHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<JFlywaySchemaHistoryRecord>>asList(Keys.FLYWAY_SCHEMA_HISTORY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JFlywaySchemaHistory as(String alias) {
        return new JFlywaySchemaHistory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JFlywaySchemaHistory as(Name alias) {
        return new JFlywaySchemaHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFlywaySchemaHistory rename(String name) {
        return new JFlywaySchemaHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFlywaySchemaHistory rename(Name name) {
        return new JFlywaySchemaHistory(name, null);
    }
}
